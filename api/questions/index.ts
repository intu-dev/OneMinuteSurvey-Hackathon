/* This code sample provides a starter kit to implement server side logic for your Teams App in TypeScript,
 * refer to https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference for complete Azure Functions
 * developer guide.
 */

// Import polyfills for fetch required by msgraph-sdk-javascript.
import "isomorphic-fetch";
import { Context, HttpRequest } from "@azure/functions";
const { TableClient } = require("@azure/data-tables");

interface Response {
  status: number;
  body: { [key: string]: any } | string;
}

type TeamsfxContext = { [key: string]: any };

async function getQuestions() {
  const tableClient = TableClient.fromConnectionString(process.env.DatabaseStorage, "questions")

  let questions = [];
  for await (const question of await tableClient.listEntities()) {
    questions.push(question);
  }

  // Initialize response.
  const res: Response = {
    status: 200,
    body: Array.from(questions),
  };
  
  return res;
}

/**
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxContext} TeamsfxContext - The context generated by teamsfx binding.
 */
export default async function run(
  context: Context,
  req: HttpRequest,
  teamsfxContext: TeamsfxContext
): Promise<Response> {
  context.log(req.method + ' - ' + req.url);

  //TODO Check the users access rights 

  switch (req.method) {
    case "GET":
      return getQuestions();
    default:
      return {
        status: 400,
        body: "Invalid request",
      };
    }
}
